# Generated by Django 5.0.4 on 2024-05-12 07:55

import colorfield.fields
import django.core.validators
import django.db.models.deletion
import phonenumber_field.modelfields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='CompanyInfo',
            fields=[
                ('id', models.UUIDField(auto_created=True, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('owner_name', models.CharField(max_length=200)),
                ('address', models.TextField()),
                ('city', models.CharField(blank=True, max_length=200, null=True)),
                ('zip', models.CharField(blank=True, max_length=30, null=True)),
                ('email', models.EmailField(max_length=254)),
                ('cell_phone', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None)),
                ('fax', models.TextField(blank=True)),
                ('extra', models.JSONField(blank=True)),
                ('url', models.TextField()),
                ('notes', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='EmergencyData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('data', models.JSONField()),
                ('note', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Expanses',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extra', models.JSONField(blank=True, null=True)),
                ('note', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('ACTIVE', 'ACTIVE'), ('DELETED', 'DELETED'), ('PAID', 'PAID')], default='INACTIVE', max_length=15)),
                ('amount', models.IntegerField()),
                ('data', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=200)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Fields',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_name', models.CharField(max_length=50)),
                ('model_name', models.CharField(blank=True, max_length=50, null=True)),
                ('field_name', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='GraphicalScheduleSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('calendar_open_slot', colorfield.fields.ColorField(default='#FF0000', image_field=None, max_length=25, samples=None, verbose_name='Calendar Open Slots Available')),
                ('calendar_all_slot_booked', colorfield.fields.ColorField(default='#FF0000', image_field=None, max_length=25, samples=None, verbose_name='All Open Slots Booked')),
                ('appointment_open_slot', colorfield.fields.ColorField(default='#FF0000', image_field=None, max_length=25, samples=None, verbose_name='Appointment Open Slots Available')),
                ('appointment_confirmed_slot', colorfield.fields.ColorField(default='#FF0000', image_field=None, max_length=25, samples=None, verbose_name='Appointment Confirmed Slot Color')),
                ('appointment_completed_slot', colorfield.fields.ColorField(default='#FF0000', image_field=None, max_length=25, samples=None, verbose_name='Appointment Complete Slot Color')),
                ('appointment_no_show_slot', colorfield.fields.ColorField(default='#FF0000', image_field=None, max_length=25, samples=None, verbose_name='Appointment No Show Appointment Color')),
                ('appointment_pending_slot', colorfield.fields.ColorField(default='#FF0000', image_field=None, max_length=25, samples=None, verbose_name='Appointment Pending Slot Color')),
                ('appointment_late_slot', colorfield.fields.ColorField(default='#FF0000', image_field=None, max_length=25, samples=None, verbose_name='Appointment Late Cancelled Slot Color')),
                ('appointment_class_apt_slot', colorfield.fields.ColorField(default='#FF0000', image_field=None, max_length=25, samples=None, verbose_name='Appointment Classroom Appointment Color')),
                ('appointment_staff_unavailable_slot', colorfield.fields.ColorField(default='#FF0000', image_field=None, max_length=25, samples=None, verbose_name='Appointment Staff Unavailability Color')),
                ('schedule_row_height', models.IntegerField(default=25, verbose_name='Scheduler Row Height')),
                ('week_start', models.CharField(choices=[('MON', 'Monday'), ('TUE', 'Tuesday'), ('WED', 'Wednesday'), ('THU', 'Thursday'), ('FRI', 'Friday'), ('SAT', 'Saturday'), ('SUN', 'Sunday')], default='MON', max_length=30)),
                ('schedule_view', models.CharField(choices=[('Day', 'Day'), ('Week', 'Week'), ('Work Week ', 'Work Week '), ('Month', 'Month'), ('Agenda', 'Agenda'), ('Timeline', 'Timeline')], default='Day', max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Instructions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Messages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('SEEN', 'SEEN'), ('DELETED', 'DELETED'), ('UNREAD', 'UNREAD')], default='UNREAD', max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='PasswordManagement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('has_2AF', models.BooleanField(default=False)),
                ('remember_password', models.IntegerField(default=0, help_text='How many we should remember')),
                ('age', models.SmallIntegerField(default=0, verbose_name='Max Password Age Policy')),
                ('min_length', models.SmallIntegerField(default=5, verbose_name='Min Password Length Policy')),
                ('reset_password_link', models.SmallIntegerField(default=4, verbose_name='Reset Password Link Age (Hours) Policy')),
                ('lower', models.BooleanField(default=False)),
                ('upper', models.BooleanField(default=False)),
                ('number', models.BooleanField(default=False)),
                ('symbol', models.BooleanField(default=False)),
                ('re_capcha', models.BooleanField(default=False)),
                ('staff_2AF', models.BooleanField(default=False, verbose_name='Enable Two Factor Authentication (2FA) for Staff')),
                ('admin_2AF', models.BooleanField(default=False, verbose_name='Enable Two Factor Authentication (2FA) for Admin')),
                ('email_2AF', models.BooleanField(default=False, verbose_name='Enable Two Factor Authentication (2FA) using Email')),
                ('OTP_expire', models.SmallIntegerField(default=5, verbose_name='OTP Expires After (Minutes)')),
                ('OTP_expire_after', models.SmallIntegerField(default=5, verbose_name='OTP Expires After (Minutes)')),
                ('request_new_OTP', models.SmallIntegerField(default=60, verbose_name='Able to Request New Code After (Seconds)')),
                ('limit_attemp', models.BooleanField(default=False, verbose_name='Limit OTP Login Attempts?')),
                ('limit_OTP', models.SmallIntegerField(default=3, verbose_name='OTP Attempt Limit')),
                ('incorrect_limit', models.SmallIntegerField(default=3, verbose_name='Incorrect OTP Attempt Limit')),
            ],
        ),
        migrations.CreateModel(
            name='Rights',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('has_add_new', models.BooleanField(default=False)),
                ('has_edit_page', models.BooleanField(default=False)),
                ('has_view_page', models.BooleanField(default=False)),
                ('has_delete_record', models.BooleanField(default=False)),
                ('has_read_own', models.BooleanField(default=False)),
                ('has_read_all', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='StorageManagement',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('last_datetime', models.DateField(auto_now_add=True)),
                ('used', models.IntegerField(default=0)),
                ('upload_month', models.IntegerField(default=0)),
                ('download_month', models.IntegerField(default=0)),
                ('number_files', models.IntegerField(default=0)),
                ('storage', models.IntegerField(default=0)),
                ('unit', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='WebContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('rest_url', models.URLField()),
                ('content', models.TextField(blank=True)),
                ('note', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ZipCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zip_code', models.IntegerField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='GeneralSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zip_coverage_filter', models.BooleanField(default=False, verbose_name='Enable Zip Code Coverage Filter')),
                ('location_coverage_filter', models.BooleanField(default=False, verbose_name='Enable Location Coverage Filter')),
                ('default_filter', models.CharField(choices=[('Location', 'Location'), ('ZipCode', 'ZipCode')], max_length=20)),
                ('show_instructions', models.BooleanField(default=False, verbose_name='Show Instructions')),
                ('show_student', models.BooleanField(default=False, verbose_name='Show Student Appnt. Observation Selection')),
                ('page_size', models.SmallIntegerField(verbose_name='Page Size For Appts')),
                ('is_cancellation_chargeable', models.BooleanField(default=False, verbose_name='Cancellation Chargeable')),
                ('not_show_chargeable', models.BooleanField(default=False, verbose_name='No Show Chargeable')),
                ('cancellation', models.IntegerField(default=False, verbose_name='Cancellation Hours')),
                ('cancellation_charge', models.IntegerField(default=False, verbose_name='Cancellation Charges ($)')),
                ('no_show_charge', models.IntegerField(default=False, verbose_name='No Show Charges ($)')),
                ('show_location', models.BooleanField(default=False, verbose_name='Show Locatio')),
                ('can_late_cancellation', models.BooleanField(default=False, verbose_name=' Cancellation Charges (Observer Only)')),
                ('single_instructor_view', models.CharField(choices=[('Settings From Staff Info', 'Settings From Staff Info'), ('Settings From Location Info', 'Settings From Location Info'), ('Settings From Vehicle Info', 'Settings From Vehicle Info')], max_length=50)),
                ('multi_instructors_view', models.CharField(choices=[('Settings From Staff Info', 'Settings From Staff Info'), ('Settings From Location Info', 'Settings From Location Info'), ('Settings From Vehicle Info', 'Settings From Vehicle Info')], max_length=50)),
                ('single_location_view', models.CharField(choices=[('Settings From Staff Info', 'Settings From Staff Info'), ('Settings From Location Info', 'Settings From Location Info'), ('Settings From Vehicle Info', 'Settings From Vehicle Info')], max_length=50)),
                ('multi_vehicle_view', models.CharField(choices=[('Settings From Staff Info', 'Settings From Staff Info'), ('Settings From Location Info', 'Settings From Location Info'), ('Settings From Vehicle Info', 'Settings From Vehicle Info')], max_length=50)),
                ('create_combined_appointment', models.BooleanField(default=False, verbose_name='CreateCombinedAppointment(Driver and Observer)')),
                ('create_single_appointment_d_o', models.BooleanField(default=False, verbose_name='CreateSingleAppointment(Driver and Observer)')),
                ('create_single_appointment_d', models.BooleanField(default=False, verbose_name='CreateSingleAppointment(DriverOnly)')),
                ('create_road_test', models.BooleanField(default=False, verbose_name='CreateRoadTest(DriverOnly)')),
                ('create_open_time_slot', models.BooleanField(default=False, verbose_name='CreateOpenTimeSlot')),
                ('create_single_student_appointment', models.BooleanField(default=False, verbose_name='CreateSingleStudentAppointment(Driver and Observer)')),
                ('create_single_appointment_o', models.BooleanField(default=False, verbose_name='CreateSingleAppointment(ObserverOnly)')),
                ('schedule_multiple_appointments', models.BooleanField(default=False, verbose_name='ScheduleMultipleAppointments')),
                ('allowdouble_bookfor_vehicle', models.BooleanField(default=False, verbose_name='AllowdoubleBookforVehicle')),
                ('allowdouble_bookfor_instructor', models.BooleanField(default=False, verbose_name='AllowdoubleBookforInstructor')),
                ('add_staff_unavailability', models.BooleanField(default=False, verbose_name='AddStaffUnavailability')),
                ('show_staff_detail', models.BooleanField(default=False, verbose_name='ShowStaffDetail')),
                ('show_pickup_dropoff', models.BooleanField(default=False, verbose_name='ShowPickup / Dropoff')),
                ('time_vehicleis_mandatory', models.BooleanField(default=False, verbose_name='TimeVehicleisMandatory')),
                ('show_complete_status', models.BooleanField(default=False, verbose_name='ShowCompleteStatus')),
                ('locationis_mandatory', models.BooleanField(default=False, verbose_name='LocationisMandatory')),
                ('pickup_locationis_mandatory', models.BooleanField(default=False, verbose_name='PickupLocationisMandatory')),
                ('show_dropoff_location', models.BooleanField(default=False, verbose_name='ShowDropoffLocation')),
                ('show_late_cancel_appointments', models.BooleanField(default=False, verbose_name='ShowLateCancelAppointments')),
                ('highlight_current_time', models.BooleanField(default=False, verbose_name='HighlightCurrentTime')),
                ('show_previous_lesson_notes', models.BooleanField(default=False, verbose_name='ShowPreviousLessonNotes')),
                ('search_student_by_name_or_by_classroom', models.BooleanField(default=False, verbose_name='SearchStudentByNameOrByClassroom')),
                ('show_product_matching_graphical_scheduler', models.BooleanField(default=False, verbose_name='ShowProductMatching(GraphicalScheduler)')),
                ('product_matching_graphical_scheduleris_mandatory', models.BooleanField(default=False, verbose_name='ProductMatching(GraphicalScheduler)isMandatory')),
                ('allow_pendingstatusappointmentswithoutstudentassisgned', models.BooleanField(default=False, verbose_name='AllowPendingstatusappointmentswithoutstudentassisgned')),
                ('allow_confirmedstatusappointmentswithoutstudentassisgned', models.BooleanField(default=False, verbose_name='AllowConfirmedstatusappointmentswithoutstudentassisgned')),
                ('AllowWebstatusappointmentswithoutstudentassisgned', models.BooleanField(default=False, verbose_name='AllowWebstatusappointmentswithoutstudentassisgned')),
                ('spliter_width', models.IntegerField(default=150, validators=[django.core.validators.MinValueValidator(150), django.core.validators.MaxValueValidator(450)])),
                ('combined_appointment', models.IntegerField(default=15, validators=[django.core.validators.MinValueValidator(15), django.core.validators.MaxValueValidator(240), django.core.validators.StepValueValidator(15)])),
                ('single_appointment_d_o', models.IntegerField(default=15, validators=[django.core.validators.MinValueValidator(15), django.core.validators.MaxValueValidator(180), django.core.validators.StepValueValidator(15)])),
                ('single_appointment_d', models.IntegerField(default=15, validators=[django.core.validators.MinValueValidator(15), django.core.validators.MaxValueValidator(180), django.core.validators.StepValueValidator(15)])),
                ('read_test', models.IntegerField(default=15, validators=[django.core.validators.MinValueValidator(15), django.core.validators.MaxValueValidator(180), django.core.validators.StepValueValidator(15)])),
                ('single_student_appointment_d', models.IntegerField(default=15, validators=[django.core.validators.MinValueValidator(15), django.core.validators.MaxValueValidator(180), django.core.validators.StepValueValidator(15)])),
                ('single_student_appointment_o', models.IntegerField(default=15, validators=[django.core.validators.MinValueValidator(15), django.core.validators.MaxValueValidator(180), django.core.validators.StepValueValidator(15)])),
                ('single_student_appointment_observ_only', models.IntegerField(default=15, validators=[django.core.validators.MinValueValidator(15), django.core.validators.MaxValueValidator(180), django.core.validators.StepValueValidator(15)])),
                ('instructions', models.ManyToManyField(related_name='instructions_setting', to='configuration.instructions')),
            ],
        ),
        migrations.CreateModel(
            name='MessageItems',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_object_id', models.IntegerField()),
                ('from_content_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='contenttypes.contenttype')),
            ],
        ),
    ]
